'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

/* eslint-disable no-console */
var onBeforeInput = function onBeforeInput(_ref) {
  var data = _ref.data,
      value = _ref.target.value;
  return console.log('beforeinput data ' + data + ', value: ' + value);
};
var onInput = function onInput(_ref2) {
  var target = _ref2.target;
  return console.log('input: ' + target.value);
};
var onChange = function onChange(_ref3) {
  var target = _ref3.target;
  return console.log('change: ' + target.value);
};
var onKeypress = function onKeypress(_ref4) {
  var which = _ref4.which;
  return console.log('keypress: ' + String.fromCharCode(which));
};
var onCompositionStart = function onCompositionStart() {
  return console.log('compositionstart');
};
var onCompositionEnd = function onCompositionEnd() {
  return console.log('compositionend');
};
var onCompositionUpdate = function onCompositionUpdate(event) {
  return console.log('compositionupdate: ' + event.data);
};

var events = {
  beforeinput: onBeforeInput,
  input: onInput,
  change: onChange,
  keypress: onKeypress,
  compositionstart: onCompositionStart,
  compositionend: onCompositionEnd,
  compositionupdate: onCompositionUpdate
};

var addDebugListeners = exports.addDebugListeners = function addDebugListeners(input) {
  Object.entries(events).forEach(function (_ref5) {
    var _ref6 = _slicedToArray(_ref5, 2),
        event = _ref6[0],
        handler = _ref6[1];

    return input.addEventListener(event, handler);
  });
};

var removeDebugListeners = exports.removeDebugListeners = function removeDebugListeners(input) {
  Object.entries(events).forEach(function (_ref7) {
    var _ref8 = _slicedToArray(_ref7, 2),
        event = _ref8[0],
        handler = _ref8[1];

    return input.removeEventListener(event, handler);
  });
};