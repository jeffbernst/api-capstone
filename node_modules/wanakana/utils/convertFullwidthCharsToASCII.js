'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _constants = require('../constants');

var _isCharInRange = require('./isCharInRange');

var _isCharInRange2 = _interopRequireDefault(_isCharInRange);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * Converts all fullwidth roman letters in string to proper ASCII
 * @param  {String} text Full Width roman letters
 * @return {String} ASCII
 */
function convertFullwidthCharsToASCII() {
  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  var asciiChars = [].concat(_toConsumableArray(text)).map(function (char, index) {
    var code = char.charCodeAt(0);
    var lower = (0, _isCharInRange2.default)(char, _constants.LOWERCASE_FULLWIDTH_START, _constants.LOWERCASE_FULLWIDTH_END);
    var upper = (0, _isCharInRange2.default)(char, _constants.UPPERCASE_FULLWIDTH_START, _constants.UPPERCASE_FULLWIDTH_END);
    if (lower) {
      return String.fromCharCode(code - _constants.LOWERCASE_FULLWIDTH_START + _constants.LOWERCASE_START);
    } else if (upper) {
      return String.fromCharCode(code - _constants.UPPERCASE_FULLWIDTH_START + _constants.UPPERCASE_START);
    }
    return char;
  });
  return asciiChars.join('');
}

exports.default = convertFullwidthCharsToASCII;